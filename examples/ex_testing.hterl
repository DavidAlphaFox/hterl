-module(ex_testing).
-compile(export_all).

integers_in_body() ->
    CapitalLetterA = $A,
    LessThanSign = $<,
    <p>
        65, % Unicode Character 'LATIN CAPITAL LETTER A' (U+0041)
        $A,
        CapitalLetterA,
        60, % Unicode Character 'LESS-THAN SIGN' (U+003C)
        $<,
        LessThanSign
    </p>.

strings_in_body() ->
    CapitalLetterA = "A",
    LessThanSign = "<",
    <p>
        "A",
        [65], % Runtime equivalent of "A"
        CapitalLetterA,
        "<",
        [60], % Runtime equivalent of "<"
        LessThanSign
    </p>.

binaries_in_body() ->
    Binary = <<"AÃ– æ¼¢å­— ðŸ”¥"/utf8>>,
    <p>
        Binary,
        <<"AÃ– æ¼¢å­— ðŸ”¥"/utf8>>
    </p>.

pre_html_in_body() ->
    <p>
        {pre_html, <<0, 255>>},
        {pre_html, [0, 255]},
        {pre_html, "\000\377"} % 377 octal = 255 decimal
    </p>.

integer_attributes() ->
    Var = 65,
    % Renders to: <p attr="65" attr="65" attr="65"></p>
    <p attr=65 attr=$A attr=Var></p>.

string_attributes() ->
    Var = "String",
    % Renders to: <p attr="String" attr="String"></p>
    <p attr="String" attr=Var></p>.

atom_attributes() ->
    Var = atom,
    % Renders to: <p attr="atom" attr="atom"></p>
    <p attr=atom attr=Var></p>.

binary_attributes() ->
    Var = <<"binary"/utf8>>,
    <p attr=(<<"binary"/utf8>>) attr=Var></p>.

escaping_attributes() ->
    String = "<>\"&",
    Atom = '<>"&',
    Binary = <<"<>\"&"/utf8>>,
    <p
        attr="<>\"&"
        attr='<>"&'
        attr=(<<"<>\"&"/utf8>>)
        attr=String
        attr=Atom
        attr=Binary></p>.

prerender() ->
    <p>
        % Contiguous string, character, and integer literals,
        % and tags, as well as lists thereof should coalesce
        % into a single binary literal when compiled with the
        % precompile option.
        "A", $B, 67, <b></b>, [],
        ["A", $B, 67, <b></b>, []]
    </p>
    <p>
        % Siblings should also coalesce.
    </p>.
